{"version":3,"sources":["./src/app/features/pages/registration-form/registration-form.component.ts","./src/app/features/pages/registration-form/registration-form.component.html","./src/app/features/pages/registration-form/registration-form.module.ts"],"names":[],"mappings":"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","file":"registration-form-registration-form-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CustomValidators } from './../../../core/validators/custom-validator';\nimport { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms'; \n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})\nexport class RegistrationFormComponent implements OnInit {\n  registrationForm: FormGroup;\n  emailPattern = '^[a-zA-Z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[a-z]{2,4}$';\n\n  constructor(private router: Router,\n    private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.initregistrationForm();\n  }\n\n  initregistrationForm() {\n    this.registrationForm = this.formBuilder.group({\n      name: ['', Validators.compose([Validators.required])],\n      phone: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(10)])],\n      email: ['', Validators.compose([Validators.required, Validators.pattern(this.emailPattern)])],\n      password: [\n        '',\n        Validators.compose([\n          Validators.required,\n          // check whether the entered password has a number\n          CustomValidators.patternValidator(/\\d/, {\n            hasNumber: true\n          }),\n          // check whether the entered password has upper case letter\n          CustomValidators.patternValidator(/[A-Z]/, {\n            hasCapitalCase: true\n          }),\n          // check whether the entered password has a lower case letter\n          CustomValidators.patternValidator(/[a-z]/, {\n            hasSmallCase: true\n          }),\n          // check whether the entered password has a special character\n          CustomValidators.patternValidator(\n            /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/,\n            {\n              hasSpecialCharacters: true\n            }\n          ),\n          Validators.minLength(8)\n        ])\n      ],\n      confirmPassword: ['', Validators.compose([Validators.required])]\n    },\n      {\n        // check whether our password and confirm password match\n        validator: CustomValidators.passwordMatchValidator\n      }\n    );\n  }\n\n  onregistration() {\n    const controls = this.registrationForm.controls;\n    console.log(controls, 'data')\n  }\n\n  onlyNumberKey(event: any): boolean {\n    const charCode = (event.which) ? event.which : event.keyCode;\n    if (charCode > 31 && (charCode < 48 || charCode > 57)) {\n      return false;\n    }\n    return true;\n  }\n\n}\n","<div class=\"main-container\">\n    <div class=\"container\">\n        <div class=\"content\">\n            <div class=\"register\">\n                <div class=\"header\">\n                    <h2 class=\"mb-2 text-center\">Registration Form</h2>\n                </div>\n                <form [formGroup]=\"registrationForm\" (ngSubmit)='onregistration()'>\n                    <!-- <div formArrayName=\"arr\" *ngFor=\"let a of registrationForm.get('arr').controls; let i = index\"></div> -->\n                    <div class=\"form-group input-field\">\n                        <label class=\"text\">Full Name</label>\n                        <input\n                            [ngClass]=\"{'error-control': !registrationForm.get('name').valid &&  registrationForm.get('name').touched}\"\n                            type=\"text\" class=\"form-control input-field\" placeholder=\"Full Name\" formControlName=\"name\">\n                        <span *ngIf=\"registrationForm.get('name').invalid  && registrationForm.get('name').touched\"\n                            class=\"error-message\">Please enter fullname</span>\n                    </div>\n                    <div class=\"form-group input-field\">\n                        <label class=\"text\">Email</label>\n                        <input\n                            [ngClass]=\"{'error-control': !registrationForm.get('email').valid &&  registrationForm.get('email').touched}\"\n                            type=\"text\" class=\"form-control input-field\" placeholder=\"Email\" formControlName=\"email\">\n                        <span\n                            *ngIf=\"registrationForm.get('email').errors?.required && registrationForm.get('email').touched\"\n                            class=\"error-message\">Please\n                            enter email</span>\n                        <span\n                            *ngIf=\"registrationForm.get('email').errors?.pattern && registrationForm.get('email').touched\"\n                            class=\"error-message\">Please enter\n                            a valid email.</span>\n                    </div>\n                    <div class=\"form-group input-field\">\n                        <label class=\"text\">Mobile Number</label>\n                        <input (keypress)=\"onlyNumberKey($event)\" maxlength=\"10\" minlength=\"10\"\n                            [ngClass]=\"{'error-control': !registrationForm.get('phone').valid &&  registrationForm.get('phone').touched}\"\n                            type=\"text\" class=\"form-control input-field\" placeholder=\"Mobile No\"\n                            formControlName=\"phone\">\n                        <span\n                            *ngIf=\"registrationForm.get('phone').errors?.required && registrationForm.get('phone').touched\"\n                            class=\"error-message\">Please enter number</span>\n                        <span\n                            *ngIf=\"registrationForm.get('phone').errors?.minlength && registrationForm.get('phone').touched\"\n                            class=\"error-message\">Please enter valid number</span>\n                        <span\n                            *ngIf=\"registrationForm.controls['phone'].hasError('maxlength') && registrationForm.get('phone').touched\"\n                            class=\"error-message\">Please enter valid number</span>\n                    </div>\n                    <div class=\"form-group input-field\">\n                        <label class=\"text\">New Password</label>\n                        <input\n                            [ngClass]=\"{'error-control': !registrationForm.get('password').valid &&  registrationForm.get('password').touched}\"\n                            type=\"text\" class=\"form-control input-field\" placeholder=\"New Password\"\n                            formControlName=\"password\">\n                        <span\n                            *ngIf=\"registrationForm.controls['password'].hasError('required') && registrationForm.get('password').touched\"\n                            class=\"error-message\">Password is Required!</span>\n\n                        <span *ngIf=\"registrationForm.get('password').touched\" class=\"error-message\"\n                            [ngClass]=\"registrationForm.controls['password'].hasError('hasSmallCase') || registrationForm.controls['password'].hasError('hasSpecialCharacters') || registrationForm.controls['password'].hasError('minlength') || registrationForm.controls['password'].hasError('hasCapitalCase') || registrationForm.controls['password'].hasError('hasNumber')  ? 'error-message' : 'hidden'\">\n                            Enter valid password!\n                        </span>\n                    </div>\n                    <div class=\"form-group input-field\">\n                        <label class=\"text\">Confirm Password</label>\n                        <input\n                            [ngClass]=\"{'error-control': !registrationForm.get('confirmPassword').valid &&  registrationForm.get('confirmPassword').touched}\"\n                            type=\"text\" class=\"form-control input-field\" placeholder=\"confirm Password\"\n                            formControlName=\"confirmPassword\">\n                        <label class=\"error-message\"\n                            *ngIf=\"registrationForm.controls['confirmPassword'].hasError('required') && registrationForm.get('confirmPassword').touched\">\n                            Password is Required!\n                        </label>\n                        <label class=\"error-message\"\n                            *ngIf=\"registrationForm.controls['confirmPassword'].hasError('NoPassswordMatch') && registrationForm.get('confirmPassword').touched\">\n                            Password and confirm password should be same!\n                        </label>\n                    </div>\n                    <div class=\"box mt-5\">\n                        <button class=\"primary-btn\" [disabled]=\"!registrationForm.valid\" type=\"submit\">SUBMIT</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { RegistrationFormComponent } from './registration-form.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'registration-form',\n    pathMatch: 'full'\n  },\n  {\n    path: 'registration-form',\n    component: RegistrationFormComponent,\n  }\n\n];\n@NgModule({\n    declarations: [RegistrationFormComponent],\n    imports: [\n        CommonModule,\n        RouterModule.forChild(routes),\n        ReactiveFormsModule,\n        FormsModule,\n    ],\n    providers: []\n})\nexport class RegistrationFormModule { }"],"sourceRoot":"webpack:///"}