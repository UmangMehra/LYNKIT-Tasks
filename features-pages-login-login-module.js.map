{"version":3,"sources":["./src/app/core/services/common.service.ts","./src/app/features/pages/login/login.component.ts","./src/app/features/pages/login/login.component.html","./src/app/features/pages/login/login.module.ts"],"names":[],"mappings":"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","file":"features-pages-login-login-module.js","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonService {\n\n  constructor() { }\n\n  saveSessionInLocal(payload) {\n    console.log(payload);\n    this.saveInLocal('email', payload.email);\n  }\n\n  removeSessionFromLocal() {\n    this.removeFromLocal('email');\n  }\n\n  getFromLocal(key: string): string {\n    return localStorage.getItem(key);\n  }\n\n  saveInLocal(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n\n  removeFromLocal(key: string) {\n    localStorage.removeItem(key);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CustomValidators } from './../../../core/validators/custom-validator';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CommonService } from './../../../core/services/common.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  emailPattern = '^[a-zA-Z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[a-z]{2,4}$';\n\n  constructor(private router: Router,\n    private formBuilder: FormBuilder,\n    private commonService: CommonService) { }\n\n  ngOnInit(): void {\n    this.initLoginForm();\n  }\n\n  initLoginForm() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(this.emailPattern)])],\n      password: [\n        '',\n        Validators.compose([\n          Validators.required,\n          // check whether the entered password has a number\n          CustomValidators.patternValidator(/\\d/, {\n            hasNumber: true\n          }),\n          // check whether the entered password has upper case letter\n          CustomValidators.patternValidator(/[A-Z]/, {\n            hasCapitalCase: true\n          }),\n          // check whether the entered password has a lower case letter\n          CustomValidators.patternValidator(/[a-z]/, {\n            hasSmallCase: true\n          }),\n          // check whether the entered password has a special character\n          CustomValidators.patternValidator(\n            /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/,\n            {\n              hasSpecialCharacters: true\n            }\n          ),\n          Validators.minLength(8)\n        ])\n      ]\n    });\n  }\n\n  onLogin() {\n    const controls = this.loginForm.controls;\n    const email = controls.email.value;\n    localStorage.setItem('email', email); \n    this.router.navigate(['../pages/home']);\n  }\n\n}\n","<div class=\"main-container\">\n    <div class=\"container\">\n        <div class=\"content\">\n            <div class=\"header\">\n                <h2 class=\"mb-2 text-center\">Login Form</h2>\n            </div>\n            <form [formGroup]=\"loginForm\" (ngSubmit)='onLogin()'>\n                <div class=\"form-group input-field\">\n                    <label for=\"email\" class=\"login-text\">Email</label>\n                    <input\n                        [ngClass]=\"{'error-control': !loginForm.get('email').valid &&  loginForm.get('email').touched}\"\n                        type=\"email\" class=\"form-control\" placeholder=\"Email\" formControlName=\"email\" />\n                    <span\n                        *ngIf=\"loginForm.get('email').errors?.required && loginForm.get('email').touched\"\n                        class=\"error-message\">Please\n                        enter email</span>\n                    <span *ngIf=\"loginForm.get('email').errors?.pattern && loginForm.get('email').touched\"\n                        class=\"error-message\">Please enter\n                        a valid email.</span>\n                </div>\n                <div class=\"form-group input-field\"> \n                    <label class=\"login-text\" for=\"exampleInputEmail1\">Password</label>\n                    <input\n                        [ngClass]=\"{'error-control': !loginForm.get('password').valid &&  loginForm.get('password').touched}\"\n                        type=\"text\" class=\"form-control input-field\" placeholder=\"New Password\"\n                        formControlName=\"password\">\n                        <span *ngIf=\"loginForm.get('password').errors?.required && loginForm.get('password').touched\"\n                        class=\"error-message\">Please enter password</span>\n\n                    <span *ngIf=\"loginForm.get('password').touched\" class=\"error-message\"\n                        [ngClass]=\"loginForm.controls['password'].hasError('hasSmallCase') || loginForm.controls['password'].hasError('hasSpecialCharacters') || loginForm.controls['password'].hasError('minlength') || loginForm.controls['password'].hasError('hasCapitalCase') || loginForm.controls['password'].hasError('hasNumber')  ? 'error-message' : 'hidden'\">\n                        Enter valid password!\n                    </span>\n                </div>\n                <div class=\"box mt-5\">\n                    <button class=\"primary-btn\" [disabled]=\"!loginForm.valid\" type=\"submit\">SUBMIT</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'login',\n    pathMatch: 'full'\n  },\n  {\n    path: 'login',\n    component: LoginComponent,\n  }\n\n];\n@NgModule({\n    declarations: [LoginComponent],\n    imports: [\n        CommonModule,\n        RouterModule.forChild(routes),\n        ReactiveFormsModule,\n        FormsModule,\n    ],\n    providers: []\n})\nexport class LoginModule { }"],"sourceRoot":"webpack:///"}